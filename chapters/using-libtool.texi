@c -*-texinfo-*-

Although Libtool is usable by itself, either from the command line or
from a non-@command{make} driven build system, it is also tightly
integrated into Autoconf and Automake.  This chapter discusses how to
use Libtool with Autoconf and Automake and explains how to set up the
files you write (@file{Makefile.am} and @file{configure.in}) to take
advantage of @command{libtool}.  For a more in depth discussion of the
workings of Libtool, particularly its command line interface,
@xref{Introducing GNU Libtool}.  Using @command{libtool} for dynamic
runtime loading is described in @xref{Using GNU libltdl}.

Using @command{libtool} to build the libraries in a project, requires
declaring your use of @command{libtool} inside the project's
@file{configure.in} and adding the Libtool support scripts to
the distribution.  You will also need to amend the build rules in either
@file{Makefile.am} or @file{Makefile.in}, depending on whether you are
using Automake.

@ignore LW
Very easy to follow--good job w/examples, too.
@end ignore

@menu
* Integration with configure.in::
* Integration with Makefile.am::
* Using libtoolize::
* Library Versioning::
* Convenience Libraries::
@end menu

@node Integration with configure.in
@section Integration with @file{configure.in}

Declaring your use of @command{libtool} in the project's
@file{configure.in} is a simple matter of adding the
@samp{AC_PROG_LIBTOOL}@footnote{@samp{AM_PROG_LIBTOOL} if you have an
older @command{automake} or @command{libtool} installation.} somewhere
near the top of the file.  I always put it immediately after the other
@samp{AC_PROG_...} macros.  If you are converting an old project to use
@command{libtool}, then you will also need to remove any calls to
@samp{AC_PROG_RANLIB}.  Since Libtool will be handling all of the
libraries, @emph{it} will decide whether or not to call @command{ranlib}
as appropriate for the build environment.
@ignore LW
Any reason why that's a good place to put it?

2000-06-28  Gary V. Vaughan

	It's prettier:
	    AC_PROG_CC
	    AC_PROG_NM
	    AC_PROG_LIBTOOL
@end ignore

@quotation
@ignore LW
I saw this in the "style" section--this is a tip, correct?:)

2000-06-28  Gary V. Vaughan

	Yup.
@end ignore
The code generated by @samp{AC_PROG_LIBTOOL} relies on the shell
variable @code{$top_builddir} to hold the relative path to the directory
which contains the @command{configure} script.  If you are using
Automake, @code{$top_builddir} is set in the environment by the
generated @file{Makefile}.  If you use Autoconf without  Automake then
you must ensure that @code{$top_builddir} is set before the call to
@samp{AC_PROG_LIBTOOL} in @file{configure.in}.

@ignore akim
s/buildir/builddir/.

2000-07-28  Gary V. Vaughan

	Thanks.

LW
You introduced the code very well here.  Thanks.
@end ignore

Adding the following code to @file{configure.in} is often sufficient:

@smallexample
@group
for top_builddir in . .. ../.. $ac_auxdir $ac_auxdir/..; do
  test -f $top_builddir/configure && break
done
@end group
@end smallexample
@end quotation


Having made these changes to add @command{libtool} support to your
project, you will need to regenerate the @file{aclocal.m4} file to pick
up the macro definitions required for @samp{AC_PROG_LIBTOOL}, and then
rebuild your @command{configure} script with these new definitions in
place.  After you have done that, there will be some new options
available from @command{configure}:

@smallexample
$ aclocal
$ autoconf
@group
$ ./configure --help
...
--enable and --with options recognized:
  --enable-shared[=PKGS]  build shared libraries [yes]
  --enable-static[=PKGS]  build static libraries [yes]
  --enable-fast-install[=PKGS]  optimize for fast installation [yes]
  --with-gnu-ld           assume the C compiler uses GNU ld [no]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --with-pic              try to use only PIC/non-PIC objects [both]
@end group
@end smallexample

These new options allow the end user of your project some control over
how they want to build the project's libraries.  The opposites of each
of these switches are also accepted, even though they are not listed by
@command{configure --help}.  You can equally pass,
@option{--disable-fast-install} or @option{--without-gnu-ld} for example.

@menu
* Extra Configure Options::
* Extra Macros for Libtool::
@end menu

@node Extra Configure Options
@subsection Extra Configure Options

@ignore LW
Before we go into a list of the various options, can we have an intro
section about extra configure options, perhaps briefly addressing what
will be covered in this section?

2000-06-28  Gary V. Vaughan

	Oh, alright then ;-)
@end ignore

What follows is a list that describes the more commonly used options
that are automatically added to @command{configure}, by virtue of using
@samp{AC_PROG_LIBTOOL} in your @file{configure.in}.  The Libtool Manual
distributed with Libtool releases always contains the most up to date
information about @command{libtool} options:

@table @option
@item --enable-shared
@itemx --enable-static
More often invoked as @option{--disable-shared} or equivalently
@option{--enable-shared=no} these switches determine whether
@command{libtool} should build shared and/or static libraries in this
package.  If the installer is short of disk space, they might like to
build entirely without static archives.  To do this they would use:

@example
$ ./configure --disable-static
@end example

Sometimes it is desirable to configure several related packages with the
same command line.  From a scheduled build script or where subpackages
with their own @command{configure} scripts are present, for example.
The @option{--enable-shared} and @option{--enable-static} switches also
accept a list of package names, causing the option to be applied to
packages whose name is listed, and the opposite to be applied to those
not listed.

By specifying:

@example
$ ./configure --enable-static=libsnprintfv,autoopts
@end example

@command{libtool} would pass @option{--enable-static} to only the packages
named @dfn{libsnprintfv} and @dfn{autoopts} in the current tree.  Any
other packages configured would effectively be passed
@option{--disable-static}.  Note that this doesn't necessarily mean that
the packages must honour these options.  Enabling static libraries for
a package which consists of only dynamic modules makes no sense, and the
package author would probably have decided to ignore such requests,
@xref{Extra Macros for Libtool}.

@item --enable-fast-install
On some machines, @command{libtool} has to relink executables when they
are installed, @xref{Installing an Executable}.  Normally, when an end
user builds your package, they will probably type:

@example
$ ./configure
$ make
$ make install
@end example

@command{libtool} will build executables suitable for copying into their
respective installation destinations, obviating the need for relinking
them on those hosts which would have required it.  Whenever
@command{libtool} links an executable which uses shared libraries, it
also creates a @dfn{wrapper script} which ensures that the environment
is correct for loading the correct libraries, @xref{Executing
Uninstalled Binaries}.  On those hosts which require it, the wrapper
script will also relink the executable in the build tree if you attempt
to run it from there before installation.

Sometimes this behaviour is not what you want, particularly if you are
developing the package and not installing between test compilations.  By
passing @option{--disable-fast-install}, the default behaviour is
reversed;  executables will be built so that they can be run from the
build tree without relinking, but during installation they may be
relinked.
@ignore LW
In which cases, for example, would you not want this behavior?

2000-06-28  Gary V. Vaughan

	If you are developing the package and not installing between
        test compilations.  :-P
@end ignore

You can pass a list of executables as the argument to
@option{--enable-fast-install} to determine which set of executables will
not be relinked at installation time (on the hosts that require it).  By
specifying:

@example
$ ./configure --enable-fast-install=autogen
@end example

The @command{autogen} executable will be linked for fast installation
(without being relinked), and any other executables in the build tree
will be linked for fast execution from their build location.  This is
useful if the remaining executables are for testing only, and will never
be installed.

Most machines do not require that executables be relinked in this way,
and in these cases @command{libtool} will link each executable once
only, no matter whether @option{--disable-fast-install} is used.
@ignore LW
Since some of these item points are so long, perhaps they should be
subsubsections instead?

2000-06-28  Gary V. Vaughan

	This is the convention used in the GNU manuals, and probably
        what a large part of the audience will be comfortable with.  I'd
        like to keep it as is.
@end ignore

@item --with-gnu-ld

This option is used to inform @command{libtool} that the C compiler is
using @sc{gnu} ld as its linker.  It is more often used in the opposite
sense when both @command{gcc} and @sc{gnu} @command{ld} are installed,
but @command{gcc} was built to use the native linker.  @command{libtool}
will probe the system for @sc{gnu} ld, and assume that it is used by
@command{gcc} if found, unless @option{--without-gnu-ld} is passed to
configure.
@ignore LW
Move these two into one graf?

2000-06-28  Gary V. Vaughan

	'kay.
@end ignore

@item --disable-libtool-lock

In normal operation, @command{libtool} will build two objects for every
source file in a package, one @dfn{@sc{pic}}@footnote{Position Independent
Code -- suitable for shared libraries which might be loaded to different
addresses when linked by the runtime loader.} and one non-@sc{pic}.  With
@command{gcc} and some other compilers, @command{libtool} can specify a
different output location for the @sc{pic} object:

@example
@group
$ libtool gcc -c shell.c
gcc -c -pic -DPIC shell.c -o .libs/shell.lo
gcc -c foo.c -o shell.o >/dev/null 2>&1
@end group
@end example

When using a compiler that doesn't accept both @option{-o} and
@option{-c} in the same command, @command{libtool} must compile first
the @sc{pic} and then the non-@sc{pic} object to the same destination file and
then move the @sc{pic} object before compiling the non-@sc{pic} object.  This
would be a problem for parallel builds, since one file might overwrite
the other.  @command{libtool} uses a simple shell locking mechanism to
avoid this eventuality.

If you find yourself building in an environment that has such a
compiler, and not using parallel @command{make}, then the locking
mechanism can be safely turned off by using
@option{--disable-libtool-lock} to gain a little extra speed in the
overall compilation.

@item --with-pic
In normal operation, Libtool will build shared libraries from @sc{pic}
objects and static archives from non-@sc{pic} objects, except where one
or the other is not provided by the target host.  By specifying
@option{--with-pic} you are asking @command{libtool} to build static
archives from @sc{pic} objects, and similarly by specifying
@option{--without-pic} you are asking @command{libtool} to build shared
libraries from non-@sc{pic} objects.

@command{libtool} will only honour this flag where it will produce a
working library, otherwise it reverts to the default.
@end table

@node Extra Macros for Libtool
@subsection Extra Macros for Libtool

There are several macros which can be added to @file{configure.in} which
will change the default behaviour of @command{libtool}.  If they are
used they must appear before the call to the @samp{AC_PROG_LIBTOOL}
macro.  Note that these macros only change the default behaviour, and
options passed in to @command{configure} on the command line will always
override the defaults.  The most up to date information about these
macros is available from the Libtool Manual.
@ignore LW
I'd like to see something like this for the previous section.  In both cases,
is there somewhere they should go for further information if they need it?
Any resources you recommend?

2000-06-28  Gary V. Vaughan

	Okay.
@end ignore

@table @samp
@cindex AC_DISABLE_FAST_INSTALL
@item AC_DISABLE_FAST_INSTALL
This macro tells @command{libtool} that on platforms which require
relinking at install time, it should build executables so that they can
be run from the build tree at the expense of relinking during
installation, as if @option{--disable-fast-install} had been passed on
the command line.

@cindex AC_DISABLE_SHARED
@cindex AC_DISABLE_STATIC
@item AC_DISABLE_SHARED
@itemx AC_DISABLE_STATIC
These macros tell @command{libtool} to @emph{not} try and build either
shared or static libraries respectively.  @command{libtool} will always
try to build @emph{something} however, so even if you turn off static
library building in @file{configure.in}, building your package for a
target host without shared library support will fallback to building
static archives.
@end table

The time spent waiting for builds during development can be reduced a
little by including these macros temporarily.  Don't forget to remove
them before you release the project though!

In addition to the macros provided with @samp{AC_PROG_LIBTOOL}, there
are a few shell variables that you may need to set yourself, depending
on the structure of your project:

@table @samp
@cindex LTLIBOBJS
@item LTLIBOBJS
If your project uses the @samp{AC_REPLACE_FUNCS} macro, or any of the
other macros which add object names to the @samp{LIBOBJS} variable, you
will also need to provide an equivalent @samp{LTLIBOBJS} definition.  At
the moment, you must do it manually, but needing to do that is
considered to be a bug and will fixed in a future release of Autoconf.
The manual generation of @samp{LTLIBOBJS} is a simple matter of
replacing the names of the objects mentioned in @samp{LIBOBJS} with
equivalent @code{.lo} suffixed Libtool object names.  The easiest way to
do this is to add the following snippet to your @file{configure.in} near
the end, just before the call to @samp{AC_OUTPUT}.

@smallexample
m4_changequote(,)m4_dnl
@group
Xsed="sed -e s/^X//"
LTLIBOBJS=`echo X"$LIBOBJS"|\
           [$Xsed -e "s,\.[^.]* ,.lo ,g;s,\.[^.]*$,.lo,"]`
AC_SUBST(LTLIBOBJS)
@end group
m4_changequote(`,')m4_dnl
@end smallexample

@ignore akim
Hm, beware of LIBOBJS="foo.${ac_objext}".  No?  I don't know actually...

2000-06-28  Gary V. Vaughan

	That's true!  I hadn't though of it.  Thankyou.
@end ignore

@noindent
The @code{Xsed} is not usually necessary, though it can prevent problems
with the @code{echo} command in the event that one of the @samp{LIBOBJS}
files begins with a @samp{-} character.  It is also a good habit to
write shell code like this, as it will avoid problems in your programs.

@cindex LTALLOCA
@item LTALLOCA
If your project uses the @samp{AC_FUNC_ALLOCA} macro, you will need to
provide a definition of @samp{LTALLOCA} equivalent to the @samp{ALLOCA}
value provided by the macro.
@ignore LW
In lists, I generally don't like to see points added for flow, because a list
by its very nature has no flow (for example, saying furthermore after numeral
2 in a numbered list)--easier to read without.  I would leave out "In a similar
vein."

2000-06-28  Gary V. Vaughan

	Good point.  Thanks.
@end ignore

@smallexample
m4_changequote(,)m4_dnl
@group
Xsed="sed -e s/^X//"
LTALLOCA=`echo X"$ALLOCA"|[$Xsed -e "s,\.$[^.]*,.lo,g"]`
AC_SUBST(LTALLOCA)
@end group
m4_changequote(`,')m4_dnl
@end smallexample

Obviously you don't need to redefine @code{Xsed} if you already use it
for @samp{LTLIBOBJS} above.

@cindex LIBTOOL_DEPS
@item LIBTOOL_DEPS
To help you write @command{make} rules for automatic updating of the
Libtool configuration files, you can use the value of
@samp{LIBTOOL_DEPS} after the call to @samp{AC_PROG_LIBTOOL}:

@example
@group
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
@end group
@end example

Then add the following to the top level @file{Makefile.in}:

@example
@group
libtool: @@LIBTOOL_DEPS@@
        cd $(srcdir) && \
          $(SHELL) ./config.status --recheck
@end group
@end example

If you are using @command{automake} in your project, it will generate
equivalent rules automatically.  You don't need to use this except in
circumstances where you want to use @command{libtool} and
@command{autoconf}, but not @command{automake}.
@end table


@node Integration with Makefile.am
@section Integration with @file{Makefile.am}

@ignore akim
Or is it @file{Makefile.am}? :)

2000-06-28  Gary V. Vaughan

	Oh, alright then. =)O|
@end ignore

Automake supports Libtool libraries in two ways.  It can help
you to build the Libtool libraries themselves, and also to build
executables which link against Libtool libraries.

@menu
* Creating Libtool Libraries with Automake::
* Linking against Libtool Libraries with Automake::
@end menu

@node Creating Libtool Libraries with Automake
@subsection Creating Libtool Libraries with Automake

@ignore akim
Why capitalizing Libraries?  @command automake?

2000-06-28  Gary V. Vaughan

	Bogosity.  Why else?
@end ignore

Continuing in the spirit of making Libtool library management look like
native static archive management, converting a @file{Makefile.am} from
static archive use to Libtool library use is a matter of changing the
name of the library, and adding a Libtool prefix somewhere.  For
example, a @file{Makefile.am} for building a static archive might be:

@example
@group
lib_LIBRARIES      = libshell.a
libshell_a_SOURCES = object.c subr.c symbol.c
@end group
@end example

This would build a static archive called @file{libshell.a} consisting of
the objects @file{object.o}, @file{subr.o} and @file{bar.o}.  To build
an equivalent Libtool library from the same objects, you change this to:

@example
@group
lib_LTLIBRARIES     = libshell.la
libshell_la_SOURCES = object.c subr.c symbol.c
@end group
@end example

The only changes are that the library is now named with a @code{.la}
suffix,  and the Automake primary is now @samp{LTLIBRARIES}.
Note that since the name of the library has changed, you also need to
use @samp{libshell_la_SOURCES}, and similarly for any other Automake
macros which used to refer to the old archive.  As for native libraries,
Libtool library names should begin with the letters @samp{lib}, so that
the linker will be able to find them when passed @option{-l} options.
@ignore LW
Want to remind you to fix the fixme:)

2000-06-28  Gary V. Vaughan

	Done.

LW
Also, should these changes be somehow noted in the index?

2000-06-28  Gary V. Vaughan

	I guess.  Though indexing on LTLIBRARIES or something should be
	sufficient.   I have had less and less time to think about index
	entries as I developed ever more content... sorry.
@end ignore

Often you will need to add extra objects to the library as determined by
@command{configure}, but this is also a mechanical process.  When
building native libraries, the @file{Makefile.am} would have contained:

@example
libshell_a_LDADD = xmalloc.o @@LIBOBJS@@
@end example

To add the same objects to an equivalent Libtool library would require:

@example
libshell_la_LDADD = xmalloc.lo @@LTLIBOBJS@@
@end example

That is, objects added to a Libtool library must be Libtool objects
(with a @code{.lo}) suffix.  You should add code to @file{configure.in}
to ensure that @samp{LTALLOCA} and @samp{LTLIBOBJS} are set
appropriately, @xref{Extra Macros for Libtool}.  Automake will
take care of generating appropriate rules for building the Libtool
objects mentioned in an @samp{LDADD} macro.

If you want to pass any additional flags to @command{libtool} when it is
building, you use the @samp{LDFLAGS} macro for that library, like this:

@example
libshell_la_LDFLAGS = -version-info 1:0:1
@end example
@ignore LW
Please introduce example--so is this the Link Mode section in the libtool
manual--(if this is obvious from the dvi file, please ignore.

2000-06-28  Gary V. Vaughan

	Respectively: Will do.  Nope.  Okay.
@end ignore

@noindent
For a detailed list of all the available options, see @ref{Link mode, ,
Link mode, Libtool, The Libtool Manual}.

@ignore LW
@c FIXME:  We probably need a discussion of why using rpath is good
Sounds good--look forward to seeing.

2000-06-29  Gary V. Vaughan

	Thanks for the reminder!
@end ignore
@quotation
@c Begin sidebar entitled: Why use @option{-rpath}?
Libtool's use of @option{-rpath} has been a point of contention for some
users, since it prevents you from moving shared libraries to another
location in the library search path.  Or, at least, if you do, all of
the executables that were linked with @option{-rpath} set to the old
location will need to be relinked.

We (the Libtool maintainers) assert that always using @option{-rpath} is
a good thing:  Mainly because you can guarantee that any executable
linked with @option{-rpath} will find the correct version of the
library, in the rpath directory, that was intended when the executable
was linked.  Library versions can still be managed correctly, and will
be found by the run time loader, by installing newer versions to the
same directory.  Additionally, it is much harder for a malicious user to
leave a modified copy of system library in a directory that someone
might wish to list in their @samp{LD_LIBRARY_PATH} in the hope that some
code they have written will be executed unexpectedly.

The argument against @option{-rpath} was instigated when one of the
@sc{gnu}/Linux distributions moved some important system libraries to
another directory to make room for a different version, and discovered
that all of the executables that relied on these libraries and were
linked with Libtool no longer worked.  Doing this was, arguably, bad
system management -- the new libraries should have been placed in a new
directory, and the old libraries left alone.  Refusing to use
@option{-rpath} in case you want to restructure the system library
directories is a very weak argument.
@end quotation

The @option{-rpath} option (which is required for Libtool libraries) is
automatically supplied by @command{automake} based on the installation
directory specified with the library primary.

@example
lib_LTLIBRARIES = libshell.la
@end example

The example would use the value of the make macro @code{$(libdir)} as
the argument to @option{-rpath}, since that is where the library will be
installed.

A few of the other options you can use in the library @samp{LDFLAGS} are:

@table @option
@item -no-undefined
Modern architectures allow us to create shared libraries with undefined
symbols, provided those symbols are resolved (usually by the executable
which loads the library) at runtime.  Unfortunately, there are some
architectures (notably @sc{aix} and Windows) which require that
@emph{all} symbols are resolved when the library is linked.  If you know
that your library has no unresolved symbols at link time, then adding
this option tells @command{libtool} that it will be able to build a
shared library, even on architectures which have this requirement.

@item -static
Using this option will force @command{libtool} to build only a static
archive for this library.

@item -release
On occasion, it is desirable to encode the release number of a library
into its name.  By specifying the release number with this option,
@command{libtool} will build a library that does this, but will break
binary compatibility for each change of the release number.  By breaking
binary compatibility this way, you negate the possibility of fixing bugs
in installed programs by installing an updated shared library.  You
should probably be using @option{-version-info} instead.

@example
libshell_la_LDFLAGS = -release 27
@end example

The above fragment might create a library called
@file{libshell-27.so.0.0.0} for example.

@item -version-info
Set the version number of the library according to the native versioning
rules based on the numbers supplied, @xref{Library Versioning}.  You
need to be aware that the library version number is for the use of the
runtime loader, and is completely unrelated to the release number of
your project.  If you really want to encode the project release into the
library, you can use @option{-release} to do it.

If this option is not supplied explicitly, it defaults to
@option{-version-info 0:0:0}.
@end table

@quotation
@c Begin sidebar entitled: Why use @option{-no-undefined}?
Historically, the default behaviour of Libtool was as if
@option{-no-undefined} was always passed on the command line, but it
proved to be annoying to developers who had to constantly turn it off so
that  their @sc{elf} libraries could be featureful.  Now it has to be
defined explicitly if you need it.

There are is a tradeoff:

@itemize @bullet
@item
If you don't specify @option{-no-undefined}, then Libtool will not build
shared libraries on platforms which don't allow undefined symbols at
link time for such a library.

@item
It is only safe to specify this flag when you know for certain that
@emph{all} of the libraries symbols are defined at link time, otherwise
the @option{-no-undefined} link will appear to work until it is tried on
a platform which requires all symbols to be defined.  Libtool will try
to link the shared library in this case (because you told it that you
have not left any undefined symbols), but the link will fail, because
there @strong{are} undefined symbols in spite of what you told Libtool.
@end itemize

For more information about this topic, see @ref{Portable Library
Design}.
@end quotation

@ignore
1999-12-04  Leah Williams

        For the series this book is in, there are two different kinds of
        asides-- a kind of author's note (dark shaded bar for heading
        text, text italic;  text of sidebar italic) and a tip/generic
        sidebar, for which you can make up a title if you wish (lighter
        grey bar for heading text, which is in italic, and italic text).
        We could have a series of tips entitled "Hot Tip" or
        something---let's discuss once you've had a chance to look this
        over.  Thanks.

2000-01-12  Alexandre Oliva

	I don't think this is good advice.  It makes it seem that
	-no-undefined is a silver bullet that will make all libraries
        portable, but AFAICT it is exactly the converse.  Only when you
        can tell for sure that all symbols used by the library will be
        available in the linker command line (taking into account that,
	on some platforms, libtool may remove some dependency libraries
        from the linker command line if they happen to be static) should
        you add -no-undefined.  When in doubt, *don't* add it, otherwise
        you may end up with a hard error instead of a silent and safe
        fallback to a static library.

        It is also worth pointing out that MS-Windows is not the only
        platform in which shared libraries require -no-undefined; so
        does AIX.  But this should be pointed out much earlier, in the
        general libtool section.  In fact, this whole discussion about
        -no-undefined should probably be moved there, and just a link
        should be added here.

2000-06-21  Gary V. Vaughan

	Did I really write that.  Ouch.  I agree with all your points.
        Done.
@end ignore

@node Linking against Libtool Libraries with Automake
@subsection  Linking against Libtool Libraries with Automake

Once you have set up your @file{Makefile.am} to create some Libtool
libraries. you will want to link an executable against them.  You can do
this easily with @command{automake} by using the program's qualified
@samp{LDADD} macro:

@example
@group
bin_PROGRAMS  = shell
shell_SOURCES = shell.c token.l
shell_LDADD   = libshell.la
@end group
@end example

This will choose either the static or shared archive from the
@file{libshell.la} Libtool library depending on the target host and any
Libtool mode switches mentioned in the @file{Makefile.am}, or passed to
@command{configure}.  The chosen archive will be linked with any objects
generated from the listed sources to make an executable.  Note that the
executable itself is a hidden file, and that in its place
@command{libtool} creates a wrapper script, @xref{Executing
Uninstalled Binaries}.

As with the Libtool libraries, you can pass additional switches for the
@command{libtool} invocation in the qualified @samp{LDFLAGS} macros to
control how the @command{shell} executable is linked:

@table @option
@item -all-static
Always choose static libraries where possible, and try to create a
completely statically linked executable.

@item -no-fast-install
If you really want to use this flag on some targets, you can pass it in
an @samp{LDFLAGS} macro.  This is not overridden by the
@command{configure} @option{--enable-fast-install} switch.  Executables
built with this flag will not need relinking to be executed from the
build tree on platforms which might have otherwise required it.

@item -no-install
You should use this option for any executables which are used only for
testing, or for generating other files and are consequently never
installed.  By specifying this option, you are telling Libtool that the
executable it links will only ever be executed from where it is built in
the build tree.  Libtool is usually able to considerably speed up the
link process for such executables.
@ignore LW
@c pending comments from Thomas Tanner <tanner@gmx.de>
Thomas?

2000-06-29  Gary V. Vaughan

	S'okay.  I used the source to figure it out for myself.
@end ignore

@item -static
This switch is similar to @option{-all-static}, except that it applies to
only the uninstalled Libtool libraries in the build tree.  Where
possible the static archive from these libraries is used, but the
default linking mode is used for libraries which are already installed.
@end table

When debugging an executable, for example, it can be useful to
temporarily use:

@example
shell_LDFLAGS = -all-static
@end example

@quotation
You can pass Libtool link options to all of the targets in a given
directory by using the unadorned @samp{LDFLAGS} macro:

@example
LDFLAGS = -static
@end example

This is best reserved for directories which have targets of the same
type, all Libtool libraries or all executables for instance.  The
technique still works in a mixed target type directory, and
@command{libtool} will ignore switches which don't make sense for
particular targets.  It is less maintainable, and makes it harder to
understand what is going on if you do that though.
@end quotation
@ignore LW
Good tip.
@end ignore


@node Using libtoolize
@section Using libtoolize

Having made the necessary editions in @file{configure.in} and
@file{Makefile.am}, all that remains is to add the Libtool
infrastructure to your project.

@ignore LW
I like your transition here.
@end ignore
First of all you must ensure that the correct definitions for the new
macros you use in @file{configure.in} are added to @file{aclocal.m4},
@xref{Generated File Dependencies}.  At the moment, the safest way to do
this is to copy @file{libtool.m4} from the installed @command{libtool}
to @file{acinclude.m4} in the toplevel source directory of your package.
This is to ensure that when your package ships, there will be no
mismatch errors between the M4 macros you provided in the version of
@command{libtool} you built the distribution with, versus the version of
the Libtool installation in another developer's environment.  In a
future release, @command{libtool} will check that the macros in
aclocal.m4 are from the same Libtool distribution as the generated
@command{libtool} script.

@smallexample
@group
$ cp /usr/share/libtool/libtool.m4 ./acinclude.m4
$ aclocal
@end group
@end smallexample

By naming the file @file{acinclude.m4} you ensure that @command{aclocal}
can see it and will use macros from it, and that @command{automake} will
add it to the distribution when you create the tarball.

Next, you should run @command{libtoolize}, which adds some files to your
distribution that are required by the macros from @file{libtool.m4}.
In particular, you will get @file{ltconfig}@footnote{The functionality
of @file{ltconfig} is slated for migration into @file{libtool.m4} for
a future release of @command{libtool}, whereupon this file will no
longer be necessary.} and @file{ltmain.sh} which are used to create a
custom @command{libtool} script on the installer's machine.

If you do not yet have them, @command{libtoolize} will also add
@file{config.guess} and @file{config.sub} to your distribution.
Sometimes you don't need to run @command{libtoolize} manually, since
@command{automake} will run it for you when it sees the changes you have
made to @file{configure.in}, as follows:

@ignore LW
Please introduce example

2000-06-29  Gary V. Vaughan

	Doh!
@end ignore
@smallexample
@group
$ automake --add-missing
automake: configure.in: installing `./install-sh'
automake: configure.in: installing `./mkinstalldirs'
automake: configure.in: installing `./missing'
configure.in: 8: required file `./ltconfig' not found
@end group
@end smallexample

The error message in the last line is an aberration.  If it were
consistent with the other lines, it would say:

@smallexample
@group
automake: configure.in: installing `./ltconfig'
automake: configure.in: installing `./ltmain.sh'
automake: configure.in: installing `./config.guess'
automake: configure.in: installing `./config.sub'
@end group
@end smallexample

But the effect is the same, and the files are correctly added to the
distribution despite the misleading message.

@quotation
Before you release a distribution of your project, it is wise to get the
latest versions of @file{config.guess} and @file{config.sub} from the
GNU site@footnote{@uref{ftp://ftp.gnu.org/gnu/config/}}, since they may
be newer than the versions automatically added by @command{libtoolize}
and @command{automake}.  Note that @command{automake --add-missing} will
give you its own version of these two files if @samp{AC_PROG_LIBTOOL} is
not used in the project @file{configure.in}, but will give you the
versions shipped with @command{libtool} if that macro is present!

@ignore akim
Hm, you should refer to subversions instead, no?

2000-06-28  Gary V. Vaughan

	Couldn't find them on subversions, but the old cvs address was
        wrong.  The ftp site I have goven seems to be updated
        regularly.
@end ignore
@end quotation

@node Library Versioning
@section Library Versioning

It is important to note from the outset that the version number of your
project is a very different thing to the version number of any libraries
shipped with your project.  It is a common error for maintainers to try
to force their libraries to have the same version number as the current
release version of the package as a whole.  At best, they will break
binary compatibility unnecessarily, so that their users won't gain the
benefits of the changes in their latest revision without relinking all
applications that use it.  At worst, they will allow the runtime
linker to load binary incompatible libraries, causing applications to
crash.

Far better, the Libtool versioning system will build native shared
libraries with the correct @emph{native} library version numbers.
Although different architectures use various numbering schemes,
Libtool abstracts these away behind the system described here.
The various native library version numbering schemes are designed so
that when an executable is started, the runtime loader can, where
appropriate, choose a more recent installed library version than the one
with which the executable was actually built.  This allows you to fix
bugs in your library, and having  built it with the correct Libtool
version number, have those fixes propagate into any executables that
were built with the old buggy version.  This can only work if the
runtime loader can tell whether it can load the new library into the old
executable and expect them to work together.  The library version
numbers give this information to the runtime loader, so it is very
important to set them correctly.

The version scheme used by Libtool tracks @dfn{interfaces},
where an interface is the set of exported entry points into the library.
All Libtool libraries start with @option{-version-info} set to
@samp{0:0:0} -- this will be the default version number if you don't
explicitly set it on the Libtool link command line.  The meaning of
these numbers (from left to right) is as follows:

@table @var
@item current
The number of the current interface exported by the library.  A
@var{current} value of @samp{0}, means that you are calling the
interface exported by this library @emph{interface 0}.

@ignore akim
Maybe instead of @samp and CURRENT, you should use @var and current?  My
$0.0000001.

2000-06-28  Gary V. Vaughan

	Good call.  Thanks.
@end ignore

@item revision
The implementation number of the most recent interface exported by this
library.  In this case, a @var{revision} value of @samp{0} means that
this is the first implementation of the interface.

If the next release of this library exports the same interface, but has
a different implementation (perhaps some bugs have been fixed), the
@var{revision} number will be higher, but @var{current} number will be
the same.  In that case, when given a choice, the library with the
highest @var{revision} will always be used by the runtime loader.

@item age
The number of previous additional interfaces supported by this library.
If @var{age} were @samp{2}, then this library can be linked into
executables which were built with a release of this library that
exported the current interface number, @var{current}, or any of the
previous two interfaces.

By definition @var{age} must be less than or equal to @var{current}.
At the outset, only the first ever interface is implemented, so
@var{age} can only be @samp{0}.
@end table

For later releases of a library, the @option{-version-info} argument
needs to be set correctly depending on any interface changes you have
made. This is quite straightforward when you understand what the three
numbers mean:

@enumerate 1
@item
If you have changed any of the sources for this library, the
@var{revision} number must be incremented.  @strong{This is a new
revision of the current interface}.

@item
If the interface has changed, then @var{current} must be incremented,
and @var{revision} reset to @samp{0}.  @strong{This is the first revision
of a new interface}.

@item
If the new interface is a superset of the previous interface (that is,
if the previous interface has not been broken by the changes in this new
release), then @var{age} must be incremented.  @strong{This release
is backwards compatible with the previous release}.

@item
If the new interface has removed elements with respect to the previous
interface, then you have broken backward compatibility and @var{age}
must be reset to @samp{0}.  @strong{This release has a new, but backwards
incompatible interface}.
@end enumerate

@quotation
@c begin sidebar entitled: Version Example
For example, if the next release of the library included some new
commands for an existing socket protocol, you would use
@command{-version-info 1:0:1}.  @strong{This is the first revision of a
new interface.  This release is backwards compatible with the previous
release}.
@ignore LW
Might look wrong to have these whole sentences italicized--if you want
to emphasize it, shouldn't we just emphasize the particular words that
are different in each point instead?

2000-06-29  Gary V. Vaughan

        I see what you mean about italicized sentences.  Lets go for
        emboldened then.  I really do want the whole sentences to stand
        out from the rest -- these are the mnemonics for the system I am
        describing.  I don't understand what you mean by emphasing only
        the words that are different... that would be all of them?
@end ignore

Later, you implement a faster way of handling part of the algorithm at
the core of the library, and release it with @command{-version-info
1:1:1}. @strong{This is a new revision of the current interface}.

Unfortunately the speed of your new implementation can only be fully
exploited by changing the @sc{api} to access the structures at a lower
level, which breaks compatibility with the previous interface, so you
release it as @command{-version-info 2:0:0}.  @strong{This release has a
new, but backwards incompatible interface}.
@end quotation

When deciding which numbers to change in the @command{-version-info}
argument for a new release, you must remember that an interface change
is not limited to the @sc{api} of the library.  The notion of an
interface must include any method by which a user (code or human) can
interact with the library: adding new builtin commands to a shell
library; the format used in an output file; the handshake protocol
required for a client connecting over a socket, and so on.

Additionally, If you use a development model which has both a stable and
an unstable tree being developed in parallel, for example, and you don't
mind forcing your users to relink all of the applications which use one
of your Libtool libraries every time you make a release, then
@command{libtool} provides the @option{-release} flag to encode the
project version number in the name of the library, @xref{Creating
Libtool Libraries with Automake}. This can save you library
compatibility problems later if you need to, say, make a patch release
of an older revision of your library, but the library version number
that you should use has already been taken by another earlier release.
In this case, you could be fairly certain that library releases from the
unstable branch will not be binary compatible with the stable releases,
so you could make all the stable releases with @samp{-release 1.0} and
begin the first unstable release with @samp{-release 1.1}.


@node Convenience Libraries
@section Convenience Libraries

Sometimes it is useful to group objects together in an intermediate
stage of a project's compilation to provide a useful handle for that
group without having to specify all of the individual objects every
time.  Convenience libraries are a portable way of creating such a
@dfn{partially linked} object:  Libtool will handle all of the
low level details in a way appropriate to the target host.  This section
describes the use of convenience libraries in conjunction with
Automake.  The principles of convenience libraries are
discussed in @ref{Creating Convenience Libraries with libtool, ,
Creating Convenience Libraries}.

The key to creating Libtool convenience libraries with
Automake is to use the@* @samp{noinst_LTLIBRARIES} macro.  For
the Libtool libraries named in this macro, Automake will
create Libtool convenience libraries which can subsequently be linked
into other Libtool libraries.

In this section I will create two convenience libraries, each in their
own subdirectory, and link them into a third Libtool library, which is
ultimately linked into an application.
@ignore LW
I like how you map out your intentions here.
@end ignore

If you want to follow this example, you should create a directory
structure to hold the sources by running the following shell commands:

@smallexample
$ mkdir convenience
$ cd convenience
$ mkdir lib
$ mkdir replace
@end smallexample
@ignore LW
Why would this be separated into a tip?  I think anyone would need to
know this--I'd leave it in the normal text.

2000-06-29  Gary V. Vaughan

	Okay.
@end ignore

The first convenience library is built from two source files in the
@file{lib} subdirectory.

@enumerate 1
@item @file{source.c}:

@ignore LW
Why don't you make each of these convenience libraries have its own section-
even something like "Sample Convenience Library 1/2/3?"  Might make it easier
for the reader to skim through.

2000-06-29  Gary V. Vaughan

	Not being deliberately stubborn here, but I much prefer it just
        the way it is now...
@end ignore
@example
m4_include(examples/convenience/lib/source.texi)
@end example

This file defines a single function to display the cosine of its
argument on standard output, and consequently relies on an
implementation of the @code{cos} function from the system libraries.
Note the conditional inclusion of @file{config.h}, which will contain a
definition of @samp{HAVE_MATH_H} if @file{configure} discovers a
@file{math.h} system header (the usual location for the declaration of
@code{cos}).  The @samp{HAVE_CONFIG_H} guard is by convention, so that
the source can be linked by passing the preprocessor macro definitions
to the compiler on the command line -- if @file{configure.in} does not
use @samp{AM_CONFIG_HEADER} for instance.

@item @file{source.h}:

@example
m4_include(examples/convenience/lib/source_h.texi)
@end example

For brevity, there is no @code{#ifndef SOURCE_H} guard.  The header is
not installed, so you have full control over where it is
@code{#include}ed, and in any case, function declarations can be safely
repeated if the header is accidentally processed more than once.  In a
real program, it would be better to list the function parameters in
the declaration so that the compiler can do type checking.  This would
limit the code to working only with @sc{ansi} compilers, unless you also
use a @code{PARAMS} macro to conditionally preprocess away the
parameters when a K&R compiler is used.  These details are beyond
the scope of this convenience library example, but are described in full
in @ref{K&R Compilers}.
@ignore LW
If it's beyond the scope of this example, can you tell them where they can find
the info if they need it?

2000-06-29  Gary V. Vaughan

	Sure.
@end ignore
@end enumerate

@ignore akim
s/convvenience/convenience/

2000-06-28  Gary V. Vaughan

	Indeed.  Thanks.
@end ignore

You also need a @file{Makefile.am} to hold the details of how this
convenience library is linked:

@example
m4_include(examples/convenience/lib/Makefile.texi)
@end example

The @samp{noinst_LTLIBRARIES} macro names the Libtool convenience
libraries to be built in this directory, @file{library.la}.   Although
not required for compilation, @file{source.h} is listed in the
@samp{SOURCES} macro of @file{library.la} so that correct source
dependencies are generated, and so that it is added to the distribution
tarball by @command{automake}'s @samp{dist} rule.

Finally, since the @code{foo} function relies on the @code{cos} function
from the system math library, @option{-lm} is named as a required
library in the @samp{LIBADD} macro.  As with all Libtool libraries,
interlibrary dependencies are maintained for convenience libraries so
that you need only list the libraries you are using directly when you
link your application later.  The libraries used by those libraries are
added by Libtool.

The parent directory holds the sources for the main executable,
@file{main.c}, and for a (non-convenience) Libtool library,
@file{error.c} & @file{error.h}.

Like @file{source.h}, the functions exported from the Libtool library
@file{liberror.la} are listed in @file{error.h}:

@example
m4_include(examples/convenience/error_h.texi)
@end example

The corresponding function definitions are in @file{error.c}:

@example
m4_include(examples/convenience/error.texi)
@end example

The @code{gratuitous()} function calls the @code{foo()} function defined
in the @file{library.la} convenience library in the @file{lib}
directory, hence @file{source.h} is included.

The definition of @code{error()} displays an error message to standard
error, along with the name of the program, @code{program_name}, which is
set by calling @code{set_program_name()}.  This function, in turn,
extracts the basename of the program from the full path using the system
function, @code{basename()}, and stores it in the library private
variable, @code{program_name}.

Usually, @code{basename()} is part of the system C library, though older
systems did not include it.  Because of this, there is no portable
header file that can be included to get a declaration, and you might see
a harmless compiler warning due to the use of the function without a
declaration.  The alternative would be to add your own declaration in
@file{error.c}.  The problem with this approach is that different
vendors will provide slightly different declarations (with or without
@code{const} for instance), so compilation will fail on those
architectures which @emph{do} provide a declaration in the system
headers that is different from the declaration you have guessed.

For the benefit of architectures which do not have an implementation of
the @code{basename()} function, a fallback implementation is provided in
the @file{replace} subdirectory.  The file @file{basename.c} follows:

@example
m4_include(examples/convenience/replace/basename.texi)
@end example

@ignore akim
I don't understand the purpose of the cast in the example above.
@end ignore

For brevity, the implementation does not use any @code{const}
declarations which would be good style for a real project, but would
need to be checked at configure time in case the end user needs to
compile the package with a K&R compiler.

The use of @code{strrchr()} is noteworthy.  Sometimes it is declared in
@file{string.h}, otherwise it might be declared in @file{strings.h}.
@acronym{BSD} based Unices, on the other hand, do not have this function at
all, but provide an equivalent function, @code{rindex()}.  The
preprocessor code at the start of the file is designed to cope with all
of these eventualities.  The last block of preprocessor code assumes
that if @code{strrchr} is already defined that it holds a working macro,
and does not redefine it.

@file{Makefile.am} contains:

@example
m4_include(examples/convenience/replace/Makefile.texi)
@end example

Once again, the @samp{noinst_LTLIBRARIES} macro names the convenience
library,@* @file{libreplace.la}.  By default there are no sources, since
we expect to have a system definition of @code{basename()}.  Additional
Libtool objects which should be added to the library based on tests at
configure time are handled by the @samp{LIBADD} macro.  @samp{LTLIBOBJS}
will contain @file{basename.lo} if the system does not provide
@code{basename}, and will be empty otherwise.  Illustrating another
feature of convenience libraries: on many architectures,
@file{libreplace.la} will contain no objects.

@ignore akim
s/featire/feature/

2000-06-28  Gary V. Vaughan

	Done.
@end ignore

Back in the toplevel project directory, all of the preceding objects are
combined by another @file{Makefile.am}:

@example
m4_include(examples/convenience/Makefile.texi)
@end example

The initial @samp{SUBDIRS} macro is necessary to ensure that the
libraries in the subdirectories are built before the final library and
executable in this directory.

Notice that I have not listed @file{error.h} in
@samp{liberror_la_SOURCES} this time, since @file{liberror.la} is an
installed library, and @file{error.h} defines the public interface to
that library.  Since the @file{liberror.la} Libtool library is
installed, I have used the @option{-version-info} option, and I have
also used @option{-no-undefined} so that the project will compile on
architectures which require all library symbols to be defined at link
time -- the reason @code{program_name} is maintained in
@file{liberror} rather than @file{main.c} is so that the library does
not have a runtime dependency on the executable which links it.

The key to this example is that by linking the @file{libreplace.la} and
@file{library.la} convenience libraries into @file{liberror.la}, all of
the objects in both convenience libraries are compiled into the single
installed library, @file{liberror.la}.  Additionally, all of the
inter-library dependencies of the convenience libraries (@option{-lm},
from @file{library.la}) are propagated to @file{liberror.la}.

@quotation
A common difficulty people experience with Automake is knowing when to
use a @samp{LIBADD} primary versus a @samp{LDADD} primary.  A useful
mnemonic is: @strong{@samp{LIBADD} is for ADDitional LIBrary objects.
@samp{LDADD} is for ADDitional linker (LD) objects.}
@end quotation

The executable, @file{convenience}, is built from @file{main.c}, and
requires only @file{liberror.la}.  All of the other implicit
dependencies are encoded within @file{liberror.la}.  Here is
@file{main.c}:

@example
m4_include(examples/convenience/main.texi)
@end example

The only file that remains before you can compile the example is
@file{configure.in}:

@example
m4_include(examples/convenience/configure.texi)
@end example

@ignore akim
Please, don't promote the use of `dnl' for comments, it is a uselessly
additional complexity.  `#' is fine, and much better looking.  IMHO,
this is a very sad practice initiated by Autoconf.  Autoconf no longer
does.

2000-06-28  Gary V. Vaughan

        Okay.

akim
Also, your example contains backquotes, and this has completely
fucked up the typography (several ``don't'' printed as ``dont'' etc.).

BTW, I see there are instances of

$`'LIBOBJS

I suppose this is to prevent m4 from understanding $LIBOBJS, but 1. it
understands only $<digits>, and 2. *only* inside the *body* of a macro,
not at top level.  So here, it is twice useless.

2000-06-28  Gary V. Vaughan

        Runaway sed script.  I'm sure this is fixed now.
@end ignore

There are checks for all of the features used by the sources in the
project: @file{math.h} and either @file{string.h} or @file{strings.h};
the existence of @code{strrchr} (@emph{after} the tests for string
headers); adding @file{basename.o} to @samp{LIBOBJS} if there is no
system implementation; and the shell code to set @samp{LTLIBOBJS}.

With all the files in place, you can now bootstrap the project:

@ignore akim
Use of GNU ls gives fine results in here, but 1. why display the `/bin/'
part, and 2. you should use it with -T 0 to disable the use of
tabulations, because below, in the printed copy, it results in almost
random indentation.  My print copy gives:

Makefile.am  config.guess  configure.in  install-sh  ltmain.sh mkinstalldirs
Makefile.in  config.sub    error.c  lib      main.c replace
aclocal.m4   configure    error.h  ltconfig    missing

i.e., each tab is printed as a single space.  Running M-x untabify is
probably enough to solve the issue.

2000-06-28  Gary V. Vaughan

	untabified.  Thanks.
@end ignore

@smallexample
@group
$ ls -R
.:
Makefile.am  configure.in  error.c  error.h  lib  main.c  replace
@end group

@group
lib:
Makefile.am  source.c  source.h
@end group

@group
replace:
Makefile.am  basename.c
@end group
$ aclocal
$ autoheader
@group
$ automake --add-missing --copy
automake: configure.in: installing `./install-sh'
automake: configure.in: installing `./mkinstalldirs'
automake: configure.in: installing `./missing'
configure.in: 7: required file `./ltconfig' not found
@end group
$ autoconf
@group
$ ls -R
.:
Makefile.am   config.h.in   error.c     ltconfig   mkinstalldirs
Makefile.in   config.sub    error.h     ltmain.sh  replace
aclocal.m4    configure     install-sh  main.c
config.guess  configure.in  lib         missing
@end group

@group
lib:
Makefile.am  Makefile.in  source.c  source.h
@end group

@group
replace:
Makefile.am  Makefile.in  basename.c
@end group
@end smallexample

With these files in place, the package can now be configured:

@smallexample
@group
$ ./configure
...
checking how to run the C preprocessor... gcc -E
checking for math.h... yes
@end group
checking for string.h... yes
checking for strrchr... yes
checking for basename... yes
updating cache ./config.cache
creating ./config.status
creating replace/Makefile
@group
creating lib/Makefile
creating Makefile
creating config.h
@end group
@end smallexample

Notice that my host has an implementation of @code{basename()}.

Here are the highlights of the compilation itself:

@smallexample
@group
$ make
Making all in replace
make[1]: Entering directory `/tmp/replace'
/bin/sh ../libtool --mode=link gcc  -g -O2  -o libreplace.la
rm -fr .libs/libreplace.la .libs/libreplace.* .libs/libreplace.*
ar cru .libs/libreplace.al
ranlib .libs/libreplace.al
creating libreplace.la
(cd .libs && rm -f libreplace.la && ln -s ../libreplace.la \
libreplace.la)
make[1]: Leaving directory `/tmp/replace'
@end group
@end smallexample

Here the build descends into the @file{replace} subdirectory and creates
@file{libreplace.la}, which is empty on my host since I don't need an
implementation of @code{basename()}:
@ignore LW
Would you introduce the example?

2000-06-29  Gary V. Vaughan

	Just a missing colon IMHO.
@end ignore

@smallexample
@group
Making all in lib
make[1]: Entering directory `/tmp/lib'
/bin/sh ../libtool --mode=compile gcc -DHAVE_CONFIG_H  -I. -I. \
-g -O2 -c source.c
rm -f .libs/source.lo
gcc -DHAVE_CONFIG_H -I. -I. -g -O2 -c -fPIC -DPIC source.c \
-o .libs/source.lo
gcc -DHAVE_CONFIG_H -I. -I. -g -O2 -c source.c \
-o source.o >/dev/null 2>&1
mv -f .libs/source.lo source.lo
/bin/sh ../libtool --mode=link gcc  -g -O2  -o library.la source.lo -lm
rm -fr .libs/library.la .libs/library.* .libs/library.*
ar cru .libs/library.al source.lo
ranlib .libs/library.al
creating library.la
(cd .libs && rm -f library.la && ln -s ../library.la library.la)
make[1]: Leaving directory `/tmp/lib'
@end group
@end smallexample

Next, the build enters the @file{lib} subdirectory to build
@file{library.la}.  The @file{configure} preprocessor macros are passed
on the command line, since no @file{config.h} was created by
@code{AC_CONFIG_HEADER}:
@ignore LW
Please introduce following code.

2000-06-29  Gary V. Vaughan

	Sure.  Sorry.
@ignore

@smallexample
@group
Making all in .
make[1]: Entering directory `/tmp'
/bin/sh ./libtool --mode=compile gcc -DHAVE_CONFIG_H -I. -I. -I./lib \
-g -O2 -c error.c
mkdir .libs
gcc -DHAVE_CONFIG_H -I. -I. -I./lib -g -O2 -Wp,-MD,.deps/error.pp -c \
-fPIC -DPIC error.c -o .libs/error.lo
error.c: In function `set_program_name':
error.c:20: warning: assignment makes pointer from integer without cast
@end group
@group
gcc -DHAVE_CONFIG_H -I. -I. -I./lib -g -O2 -Wp,-MD,.deps/error.pp -c \
error.c -o error.o >/dev/null 2>&1
mv -f .libs/error.lo error.lo
@end group
@group
/bin/sh ./libtool --mode=link gcc  -g -O2  -o liberror.la -rpath \
/usr/local/lib -no-undefined -version-info 0:0:0 error.lo \
replace/libreplace.la lib/library.la
rm -fr .libs/liberror.la .libs/liberror.* .libs/liberror.*
gcc -shared  error.lo -Wl,--whole-archive replace/.libs/libreplace.al \
lib/.libs/library.al -Wl,--no-whole-archive  \
replace/.libs/libreplace.al lib/.libs/library.al -lc  -Wl,-soname \
-Wl,liberror.so.0 -o .libs/liberror.so.0.0.0
@end group
@group
(cd .libs && rm -f liberror.so.0 && ln -s liberror.so.0.0.0 \
liberror.so.0)
(cd .libs && rm -f liberror.so && ln -s liberror.so.0.0.0 liberror.so)
rm -fr .libs/liberror.lax
mkdir .libs/liberror.lax
rm -fr .libs/liberror.lax/libreplace.al
mkdir .libs/liberror.lax/libreplace.al
(cd .libs/liberror.lax/libreplace.al && ar x \
/tmp/replace/.libs/libreplace.al)
rm -fr .libs/liberror.lax/library.al
mkdir .libs/liberror.lax/library.al
(cd .libs/liberror.lax/library.al && ar x \
/tmp/lib/.libs/library.al)
@end group
@group
ar cru .libs/liberror.a error.o .libs/liberror.lax/library.al/source.lo
ranlib .libs/liberror.a
rm -fr .libs/liberror.lax
creating liberror.la
(cd .libs && rm -f liberror.la && ln -s ../liberror.la liberror.la)
@end group
@end smallexample

@noindent
The resulting convenience library is an archive of the resulting
@sc{pic} objects.  The inter-library dependency, @option{-lm}, is passed
to @command{libtool} and, although not needed to create the convenience
library, @emph{is} stored in the pseudo-archive, @file{library.la}, to
be used when another object links against it.

Also you can see the harmless compiler warning I mentioned earlier, due
to the missing declaration for @code{basename()}.  Notice how
@command{libtool} uses the @option{--whole-archive} option of @sc{gnu}
ld to link the convenience library contents directly into
@file{liberror.so}, but extracts the @sc{pic} objects from each of the
convenience libraries so that a new @file{liberror.a} can be made from
them.  Unfortunately, this means that the resulting static archive
component of @file{liberror.la} has a mixture of @sc{pic} and
non-@sc{pic} objects.  In a future release of @command{libtool}, this
will be addressed by tracking both types of objects in the convenience
archive if necessary, and using the correct type of object depending on
context.
@ignore LW
Please introduce following example.

2000-06-29  Gary V. Vaughan

	Sure.  Sorry.
@end ignore

Here, @file{main.c} is compiled (not to a Libtool object, since it is
not compiled using @command{libtool}), and linked with the
@file{liberror.la} Libtool library:

@smallexample
@group
gcc -DHAVE_CONFIG_H -I. -I.  -I./lib  -g -O2 -c main.c
/bin/sh ./libtool --mode=link gcc  -g -O2  -o convenience  main.o \
liberror.la
gcc -g -O2 -o .libs/convenience main.o ./.libs/liberror.so -lm \
-Wl,--rpath -Wl,/usr/local/lib
creating convenience
make[1]: Leaving directory `/tmp/convenience'
@end group
@end smallexample

@ignore akim
Note that here, we are in `/home/gary/convenience', but the run below
refers to liberror.so.0 => /home/gary/autobook/examples/convenience/.libs/liberror.so.0 (0x40014000)

2000-06-28  Gary V. Vaughan

	Thanks.  Done.
@end ignore

@command{libtool} calls @command{gcc} to link the @command{convenience}
executable from @file{main.o} and the shared library component of
@file{liberror.la}.  @command{libtool} also links with @option{-lm}, the
propagated inter-library dependency of the @file{library.la} convenience
library.  Since @file{libreplace.la} and @file{library.la} were
convenience libraries, their objects are already present in
@file{liberror.la}, so they are not listed again in the final link line
-- the whole point of convenience archives.

@ignore akim
Below, other tab problems.

2000-06-28  Gary V. Vaughan

	Sorted.

LW
Please introduce following example

2000-06-29  Gary V. Vaughan

	Sure.  Sorry.

LW
??Don't understand this.

2000-06-29  Gary V. Vaughan

	Better now.  Thanks.
@end ignore

This just shows that it all works:

@smallexample
@group
$ ls
Makefile      config.h       configure.in  install-sh   main.c
Makefile.am   config.h.in    convenience   lib          main.o
Makefile.in   config.log     error.c       liberror.la  missing
aclocal.m4    config.status  error.h       libtool      mkinstalldirs
config.cache  config.sub     error.lo      ltconfig     replace
config.guess  configure      error.o       ltmain.sh
@end group
@group
$ libtool --mode=execute ldd convenience
        liberror.so.0 => /tmp/.libs/liberror.so.0 (0x40014000)
        libm.so.6 => /lib/libm.so.6 (0x4001c000)
        libc.so.6 => /lib/libc.so.6 (0x40039000)
        /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
$ ./convenience
cos (0) => 1
lt-convenience: ERROR: This program does nothing!
@end group
@end smallexample

Notice that you are running the uninstalled executable, which is in
actual fact a wrapper script, @xref{Executing Uninstalled Binaries}.
That is why you need to use @command{libtool} to run @command{ldd} on
the real executable.  The uninstalled executable called by the wrapper
script is called @command{lt-convenience}, hence the output from
@code{basename()}.

Finally, you can see from the output of @command{ldd}, that
@command{convenience} really isn't linked against either
@file{library.la} and @file{libreplace.la}.

@ignore akim
This chapter is great, I enjoyed it!

I regretted you didn't use `config.h', because it results in long line
of compilation, which is unpleasant when you read them.  Your examples,
anyway, are ready to use it, since they already have the protected
`include' :).

2000-06-28  Gary V. Vaughan

        Agreed.  Thanks again.
@end ignore


@c Local variables:
@c fill-column: 72
@c End:
